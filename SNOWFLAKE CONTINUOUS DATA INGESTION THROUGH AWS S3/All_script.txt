

CREATE OR REPLACE DATABASE BANK;
USE BANK;

CREATE OR REPLACE TABLE DISTRICT(
District_Code INT PRIMARY KEY	,
District_Name VARCHAR(100)	,
Region VARCHAR(100)	,
No_of_inhabitants	INT,
No_of_municipalities_with_inhabitants_less_499 INT,
No_of_municipalities_with_inhabitants_500_btw_1999	INT,
No_of_municipalities_with_inhabitants_2000_btw_9999	INT,
No_of_municipalities_with_inhabitants_less_10000 INT,	
No_of_cities	INT,
Ratio_of_urban_inhabitants	FLOAT,
Average_salary	INT,
No_of_entrepreneurs_per_1000_inhabitants INT,
No_committed_crime_2017	INT,
No_committed_crime_2018 INT
) ;



CREATE OR REPLACE TABLE ACCOUNT(
account_id INT PRIMARY KEY,
district_id	INT,
frequency	VARCHAR(60),
Date DATE ,
Account_type VARCHAR(60),
Card_Assigned VARCHAR(40),
FOREIGN KEY (district_id) references DISTRICT(District_Code) 
);

CREATE OR REPLACE TABLE ORDER_LIST (
order_id	INT PRIMARY KEY,
account_id	INT,
bank_to	VARCHAR(45),
account_to	INT,
amount FLOAT,
FOREIGN KEY (account_id) references ACCOUNT(account_id)
);



CREATE OR REPLACE TABLE LOAN(
loan_id	INT ,
account_id	INT,
Date	DATE,
amount	INT,
duration	INT,
payments	INT,
status VARCHAR(35),
FOREIGN KEY (account_id) references ACCOUNT(account_id)
);



CREATE OR REPLACE TABLE TRANSACTIONS(
trans_id INT,	
account_id	INT,
Date	DATE,
Type	VARCHAR(30),
operation	VARCHAR(40),
amount	INT,
balance	FLOAT,
Purpose	VARCHAR(40),
bank	VARCHAR(45),
account_partner_id INT,
FOREIGN KEY (account_id) references ACCOUNT(account_id));


CREATE OR REPLACE TABLE CLIENT(
client_id	INT PRIMARY KEY,
Sex	VARCHAR(10),
Birth_date	DATE,
district_id INT,
FOREIGN KEY (district_id) references DISTRICT(District_Code) 
);


CREATE OR REPLACE TABLE DISPOSITION(
disp_id	INT PRIMARY KEY,
client_id INT,
account_id	INT,
type CHAR(15),
FOREIGN KEY (account_id) references ACCOUNT(account_id),
FOREIGN KEY (client_id) references CLIENT(client_id)
);


CREATE OR REPLACE TABLE CARD(
card_id	INT PRIMARY KEY,
disp_id	INT,
type CHAR(10)	,
issued DATE,
FOREIGN KEY (disp_id) references DISPOSITION(disp_id)
);




create or replace file format AWS_BANK_CSV
    type = 'csv' 
    compression = 'none' 
    field_delimiter = ','
    field_optionally_enclosed_by = 'none'
    skip_header = 1 ; 



         -----------------AWS (S3) INTEGRATION-------------------
   

CREATE OR REPLACE STORAGE integration BANK_s3_AWS_int
TYPE = EXTERNAL_STAGE
STORAGE_PROVIDER = S3
ENABLED = TRUE
STORAGE_AWS_ROLE_ARN ='arn:aws:iam::905418392165:role/CZE_BANK_ROLE' 
STORAGE_ALLOWED_LOCATIONS =('s3://czechoslovakia-bank');

                              


DESC integration BANK_s3_AWS_int;


CREATE OR REPLACE STAGE BANK_STAGE
URL ='s3://czechoslovakia-bank'
file_format = BANK.PUBLIC.AWS_BANK_CSV
storage_integration = BANK_s3_AWS_int;

LIST @BANK_STAGE;

SHOW STAGES;



  ---------------------------------------SNOWPIPE---------------------------------------------------------

--CREATE SNOWPIPE THAT RECOGNISES CSV THAT ARE INGESTED FROM EXTERNAL STAGE AND COPIES THE DATA INTO EXISTING TABLE

--The AUTO_INGEST=true parameter specifies to read 
--- event notifications sent from an S3 bucket to an SQS queue when new data is ready to load.

   
CREATE OR REPLACE PIPE BANK_SNOWPIPE_TRANSACTIONS  AUTO_INGEST = TRUE AS
COPY INTO BANK.PUBLIC.TRANSACTIONS--COPY INTO YOUR TABLE 
FROM '@BANK_STAGE/TRANSACTIONS/' --(FROM @STAGING NAME FOLLOWED BY SUB FOLDER INSIDE YOUR BUCKET)
FILE_FORMAT = BANK.PUBLIC.AWS_BANK_CSV;



CREATE OR REPLACE PIPE BANK_SNOWPIPE_ACCOUNT  AUTO_INGEST = TRUE AS
COPY INTO BANK.PUBLIC.ACCOUNT--COPY INTO YOUR TABLE 
FROM '@BANK_STAGE/ACCOUNT/' --(FROM @STAGING NAME FOLLOWED BY SUB FOLDER INSIDE YOUR BUCKET)
FILE_FORMAT = BANK.PUBLIC.AWS_BANK_CSV;



---
CREATE OR REPLACE PIPE BANK_SNOWPIPE_CARD  AUTO_INGEST = TRUE AS
COPY INTO BANK.PUBLIC.CARD--COPY INTO YOUR TABLE 
FROM '@BANK_STAGE/CARD/' --(FROM @STAGING NAME FOLLOWED BY SUB FOLDER INSIDE YOUR BUCKET)
FILE_FORMAT = BANK.PUBLIC.AWS_BANK_CSV;




CREATE OR REPLACE PIPE BANK_SNOWPIPE_CLIENS  AUTO_INGEST = TRUE AS
COPY INTO BANK.PUBLIC.CLIENT--COPY INTO YOUR TABLE 
FROM '@BANK_STAGE/CLIENT/' --(FROM @STAGING NAME FOLLOWED BY SUB FOLDER INSIDE YOUR BUCKET)
FILE_FORMAT = BANK.PUBLIC.AWS_BANK_CSV;





CREATE OR REPLACE PIPE BANK_SNOWPIPE_DISPOSITION  AUTO_INGEST = TRUE AS
COPY INTO BANK.PUBLIC.DISPOSITION--COPY INTO YOUR TABLE 
FROM '@BANK_STAGE/DISPOSITION//' --(FROM @STAGING NAME FOLLOWED BY SUB FOLDER INSIDE YOUR BUCKET)
FILE_FORMAT = BANK.PUBLIC.AWS_BANK_CSV;





CREATE OR REPLACE PIPE BANK_SNOWPIPE_DISTRICT  AUTO_INGEST = TRUE AS
COPY INTO BANK.PUBLIC.DISTRICT--COPY INTO YOUR TABLE 
FROM '@BANK_STAGE/DISTRICT/' --(FROM @STAGING NAME FOLLOWED BY SUB FOLDER INSIDE YOUR BUCKET)
FILE_FORMAT = BANK.PUBLIC.AWS_BANK_CSV;




CREATE OR REPLACE PIPE BANK_SNOWPIPE_LOAN  AUTO_INGEST = TRUE AS
COPY INTO BANK.PUBLIC.LOAN--COPY INTO YOUR TABLE 
FROM '@BANK_STAGE/LOAN/' --(FROM @STAGING NAME FOLLOWED BY SUB FOLDER INSIDE YOUR BUCKET)
FILE_FORMAT = BANK.PUBLIC.AWS_BANK_CSV;




CREATE OR REPLACE PIPE BANK_SNOWPIPE_ORDER_LIST  AUTO_INGEST = TRUE AS
COPY INTO BANK.PUBLIC.ORDER_LIST--COPY INTO YOUR TABLE 
FROM '@BANK_STAGE/ORDER_LIST/' --(FROM @STAGING NAME FOLLOWED BY SUB FOLDER INSIDE YOUR BUCKET)
FILE_FORMAT = BANK.PUBLIC.AWS_BANK_CSV;


SHOW PIPES;

SELECT count(*) FROM DISTRICT;
SELECT count(*) FROM ACCOUNT;
SELECT count(*) FROM TRANSACTIONS;
SELECT count(*) FROM DISPOSITION;
SELECT count(*) FROM CARD;
SELECT count(*) FROM ORDER_LIST;
SELECT count(*) FROM LOAN;
SELECT count(*) FROM CLIENT;


ALTER PIPE BANK_SNOWPIPE_TRANSACTIONS refresh;
ALTER PIPE BANK_SNOWPIPE_ACCOUNT refresh;
ALTER PIPE BANK_SNOWPIPE_CARD refresh;
ALTER PIPE BANK_SNOWPIPE_CLIENS refresh;
ALTER PIPE BANK_SNOWPIPE_DISPOSITION refresh;
ALTER PIPE BANK_SNOWPIPE_DISTRICT refresh;
ALTER PIPE BANK_SNOWPIPE_LOAN refresh;
ALTER PIPE BANK_SNOWPIPE_ORDER_LIST refresh;







